package ui

// Map of variants classes
var _default = map[string]string{
	"default":   "bg-blue-700 text-slate-100 focus-visible:outline-blue-700 dark:bg-blue-600 dark:text-slate-100 dark:focus-visible:outline-blue-600",
	"secondary": "bg-indigo-700 text-slate-100 focus-visible:outline-indigo-700 dark:bg-indigo-600 dark:text-slate-100 dark:focus-visible:outline-indigo-600",
	"alternate": "bg-slate-100 text-black focus-visible:outline-slate-100 dark:bg-slate-800 dark:text-white dark:focus-visible:outline-slate-800",
	"inverse":   "bg-slate-900 text-slate-300 focus-visible:outline-slate-900 dark:bg-white dark:text-slate-700 dark:focus-visible:outline-white",
	"info":      "bg-sky-600 text-white focus-visible:outline-sky-600 dark:bg-sky-600 dark:text-white dark:focus-visible:outline-sky-600",
	"danger":    "bg-red-600 text-white focus-visible:outline-red-600 dark:bg-red-600 dark:text-white dark:focus-visible:outline-red-600",
	"warning":   "bg-amber-500 text-white focus-visible:outline-amber-500 dark:bg-amber-500 dark:text-white dark:focus-visible:outline-amber-500",
	"success":   "bg-green-600 text-white focus-visible:outline-green-600 dark:bg-green-600 dark:text-white dark:focus-visible:outline-green-600",
}

const _defaultBase = "cursor-pointer whitespace-nowrap rounded-xl px-4 py-2 text-base font-medium tracking-wide transition hover:opacity-75 text-center focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed"

var outlined = map[string]string{
	"default":   "border-blue-700 text-blue-700 focus-visible:outline-blue-700 dark:border-blue-600 dark:text-blue-600 dark:focus-visible:outline-blue-600",
	"secondary": "border-indigo-700 text-indigo-700 focus-visible:outline-indigo-700 dark:border-indigo-600 dark:text-indigo-600 dark:focus-visible:outline-indigo-600",
	"alternate": "border-slate-300 text-slate-300 focus-visible:outline-slate-300 dark:border-slate-700 dark:text-slate-700 dark:focus-visible:outline-slate-700",
	"inverse":   "border-slate-900 text-slate-900 focus-visible:outline-slate-900 dark:border-white dark:text-white dark:focus-visible:outline-white",
	"info":      "border-sky-600 text-sky-600 focus-visible:outline-sky-600 dark:border-sky-600 dark:text-sky-600 dark:focus-visible:outline-sky-600",
	"danger":    "border-red-600 text-red-600 focus-visible:outline-red-600 dark:border-red-600 dark:text-red-600 dark:focus-visible:outline-red-600",
	"warning":   "border-amber-500 text-amber-500 focus-visible:outline-amber-500 dark:border-amber-500 dark:text-amber-500 dark:focus-visible:outline-amber-500",
	"success":   "border-green-600 text-green-600 focus-visible:outline-green-600 dark:border-green-600 dark:text-green-600 dark:focus-visible:outline-green-600",
}

const outlinedBase = "cursor-pointer whitespace-nowrap bg-transparent rounded-xl border px-4 py-2 text-sm font-medium tracking-wide transition hover:opacity-75 text-center focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed"

// Function to retrieve the classes based on the attributes
func getButtonClasses(attrs templ.Attributes) string {
	classes := _default
	classesBase := _defaultBase

	if value, ok := attrs["variant"].(string); ok {
		switch value {
		case "outlined":
			classes = outlined
			classesBase = outlinedBase
		default:
			classes = _default
			classesBase = _defaultBase
		}
	}

	// Retrieve the color class from the classes set
	if color, ok := attrs["color"].(string); ok {
		if buttonClass, exists := classes[color]; exists {
			return buttonClass + classesBase
		}
	}

	return classes["default"] + classesBase // Return a default value if the class is not found
}

const buttonBase = "flex items-center justify-center gap-2"

// Template function for rendering a button or anchor element
templ Button(attrs templ.Attributes) {
	if href, ok := attrs["href"]; ok && href != "" {
		<a class={ buttonBase, getButtonClasses(attrs), GetAttrValue(attrs["class"]) } { attrs... }>
			if GetAttrValue(attrs["icon"]) != "" {
				@Icon(GetAttrValue(attrs["icon"]), GetAttrValue(attrs["icon-class"]))
			}
			if GetAttrValue(attrs["icon-only"]) == "true" {
			} else {
				<span class={ GetAttrValue(attrs["children-class"]) }>
					{ children... }
				</span>
			}
		</a>
	} else {
		<button type="button" class={ buttonBase, getButtonClasses(attrs), GetAttrValue(attrs["class"]) } { attrs... }>
			if GetAttrValue(attrs["icon"]) != "" {
				@Icon(GetAttrValue(attrs["icon"]), GetAttrValue(attrs["icon-class"]))
			}
			if GetAttrValue(attrs["icon-only"]) == "true" {
			} else {
				<span class={ GetAttrValue(attrs["children-class"]) }>
					{ children... }
				</span>
			}
		</button>
	}
}
